Name: RunAllTests
Compute:
  Type: EC2
  Fleet: Linux.x86-64.Large
SchemaVersion: "1.0"
Triggers:
  - Type: Push
    Branches:
      - main
Actions:
  RunDependencyAudits:
    Actions:
      RunNpmAudit:
        Identifier: aws/managed-test@v1.0.0
        Inputs:
          Sources:
            - WorkflowSource
        Configuration:
          Steps:
            - Run: npm audit --audit-level=high
          Container:
            Registry: CODECATALYST
            Image: CodeCatalystLinux_x86_64:2024_03
        Environment:
          Name: development
        Timeout: 60
      RunPipAudit:
        Identifier: aws/managed-test@v1.0.0
        Inputs:
          Sources:
            - WorkflowSource
        Configuration:
          Steps:
            - Run: pip install -U pip-audit poetry
            - Run: cd source/app
            - Run: poetry export -f requirements.txt --output requirements.txt
            - Run: pip-audit -r requirements.txt
          Container:
            Registry: CODECATALYST
            Image: CodeCatalystLinux_x86_64:2024_03
        Environment:
          Name: development
        Timeout: 60
  RunUnitTests:
    Actions:
      RunCdkTests:
        Identifier: aws/managed-test@v1.0.0
        Inputs:
          Sources:
            - WorkflowSource
        Outputs:
          Reports:
            CDKTestReport:
              SuccessCriteria:
                PassRate: 100
              IncludePaths:
                - deployment/test-reports/cdk-test-report.xml
              Format: JUNITXML
            CDKCoverageReport:
              SuccessCriteria:
                LineCoverage: 80
              IncludePaths:
                - deployment/coverage-reports/cdk-coverage/clover.xml
              Format: CLOVERXML
        Configuration:
          Steps:
            - Run: npm ci
            - Run: npm run test:cdk:ci
          Container:
            Registry: CODECATALYST
            Image: CodeCatalystLinux_x86_64:2024_03
        Environment:
          Name: development
        Timeout: 60
      RunLambdaTests:
        Identifier: aws/managed-test@v1.0.0
        Inputs:
          Sources:
            - WorkflowSource
        Outputs:
          Reports:
            LambdaTestReport:
              SuccessCriteria:
                PassRate: 100
              IncludePaths:
                - deployment/test-reports/lambda-test-report.xml
              Format: JUNITXML
            LambdaTestCoverage:
              Format: COBERTURAXML
              IncludePaths:
                - deployment/coverage-reports/lambda-coverage.xml
              SuccessCriteria:
                LineCoverage: 80
        Configuration:
          Steps:
            - Run: python --version
            - Run: python -m pip install -U pip setuptools tox
            - Run: npm run test:app:ci
          Container:
            Registry: CODECATALYST
            Image: CodeCatalystLinux_x86_64:2024_03
        Environment:
          Name: development
        Timeout: 60
  Deploy:
    Actions:
      RunCdkBootstrap:
        Identifier: aws/build@v1.0.0
        Inputs:
          Sources:
            - WorkflowSource
          Variables:
            - Name: LAUNCH_OPTIONS_region
              Value: us-west-2
        Configuration:
          Steps:
            - Run: export AWS_REGION=$LAUNCH_OPTIONS_region
            - Run: npm ci
            - Run: npx cdk bootstrap
          Container:
            Registry: CODECATALYST
            Image: CodeCatalystLinux_x86_64:2024_03
        Environment:
          Name: development
        Timeout: 60
      DeploySolution:
        Identifier: aws/build@v1.0.0
        Inputs:
          Sources:
            - WorkflowSource
          Variables:
            - Name: LAUNCH_OPTIONS_region
              Value: us-west-2
        Configuration:
          Steps:
            - Run: export AWS_REGION=$LAUNCH_OPTIONS_region
            - Run: npm ci
            - Run: npx cdk deploy instance-scheduler-on-aws --context
                stackName=instance-scheduler-on-aws-test --parameters
                SchedulerFrequency=1 --parameters Namespace=e2etesting
                --parameters ScheduledServices=Both --parameters
                EnableSSMMaintenanceWindows=Yes --parameters Trace=Yes
                --require-approval never
          Container:
            Registry: CODECATALYST
            Image: CodeCatalystLinux_x86_64:2024_03
        Environment:
          Name: development
        Timeout: 60
        DependsOn:
          - RunCdkBootstrap
      DeployTestResources:
        Identifier: aws/build@v1.0.0
        Inputs:
          Sources:
            - WorkflowSource
          Variables:
            - Name: LAUNCH_OPTIONS_region
              Value: us-west-2
        Configuration:
          Steps:
            - Run: export AWS_REGION=$LAUNCH_OPTIONS_region
            - Run: npm ci
            - Run: npx cdk deploy instance-scheduler-on-aws-end-to-end-testing-resources
                --require-approval never
          Container:
            Registry: CODECATALYST
            Image: CodeCatalystLinux_x86_64:2024_03
        Environment:
          Name: development
        Timeout: 60
        DependsOn:
          - RunCdkBootstrap
    DependsOn:
      - RunUnitTests
      - RunDependencyAudits
  RunE2ETests:
    Identifier: aws/managed-test@v1.0.0
    Inputs:
      Sources:
        - WorkflowSource
      Variables:
        - Name: LAUNCH_OPTIONS_region
          Value: us-west-2
    Outputs:
      Reports:
        E2ETestReport:
          Format: JUNITXML
          IncludePaths:
            - deployment/test-reports/e2e-test-report.xml
          SuccessCriteria:
            PassRate: 100
    Configuration:
      Steps:
        - Run: export AWS_REGION=$LAUNCH_OPTIONS_region
        - Run: npm ci
        - Run: npm run e2e-tests
      Container:
        Registry: CODECATALYST
        Image: CodeCatalystLinux_x86_64:2024_03
    Environment:
      Name: development
    DependsOn:
      - Deploy
    Timeout: 60
